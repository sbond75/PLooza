// Based on "A Flock of Functions: Lambda Calculus and Combinatory Logic in JavaScript | Gabriel Lebec @ DevTalks" ( https://www.youtube.com/watch?v=6BnVo7EHO_8 )

// Calls a given function on itself.
//l mockingbird = f in (f f); // causes infinite type checking loop, is normal, like Haskell

// Identity function: returns the input.
l id = x in x;

// This should equal the identity function.
///mockingbird id; // causes infinite type checking loop, is normal, like Haskell
//l res = mockingbird id;
//io.print (mockingbird id);

// Stack overflow:
//l omega = mockingbird mockingbird;

// Takes in two things and returns the first one:
// The kestrel, aka the "K" combinator:
l kestrel = a in (b in a); // aka "first"    // type: a->b->a

// This should equal 1.
kestrel 1 2;

// This should equal 2.
kestrel 2 kestrel;
//io.print (kestrel 2 kestrel);

// A function that returns 5 always regardless of its input.
l k5 = kestrel 5; // k5, aka "the 'constant 5' function"
io.print (k5 1);

// This should equal the mockingbird.
// TODO: fix parser bug.. `kestrel mockingbird id` should be acceptable instead of `(kestrel mockingbird id)` which requires parens
//(kestrel mockingbird id); // causes infinite type checking loop, is normal, like Haskell
//io.print (kestrel mockingbird id);

// This should equal the identity function.
// (kestrel id mockingbird); // causes infinite type checking loop, is normal, like Haskell
// io.print ((kestrel id) mockingbird); // causes infinite type checking loop, is normal, like Haskell
// io.print (kestrel id mockingbird); // causes infinite type checking loop, is normal, like Haskell

io.print id;


i x = 10;
i y = 20;
//io.print (kestrel id x);
//io.print (id 5);
// l kestrelIdX = kestrel id x;
// io.print kestrelIdX;
// io.print (kestrelIdX y);
io.print (kestrel id x) == id; // This should print "true"

io.print ((kestrel id x) y);
// `::` means "has type":
// (kestrel :: a->b->a) (id :: a->a) :: b->(a->a)
// (kestrel id x) :: a->a
// (kestrel id x y) :: int

i y2 = kestrel id x y; // This should equal `y`.
io.print y2;

// `ki` (aka "kite") returns the second of two things.
l ki = kestrel id;
l kite = ki;

// Prints `3`.
io.print (kite 2 3);

// Should equal the `id` function.
l test = ki 2;
io.print (test == id);


// The cardinal, aka "the C combinator"
// Applies a given function with given arguments `a` and `b` in flipped order.
l cardinal = f in (a in (b in f b a));


// Aliases for things
l C = cardinal;
l K = kestrel;
l I = id;
//l M = mockingbird;

io.print (((cardinal id) 1) id); // prints 1

i res = cardinal kestrel id 1;
io.print res; // prints 1









// l first = x,y in x;
// l second = x,y in y;



// l test = io.print;
// l const1 = _ in 1;
// test const1;
